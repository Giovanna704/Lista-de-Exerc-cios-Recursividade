#include <stdio.h>

// 29. Labirinto com backtracking
// Escreva uma função recursiva em C que encontre um caminho em um labirinto representado por uma matriz n x m, onde 0 é caminho livre e 1 é parede. A posição inicial é (0,0) e o destino é (n-1, m-1).

#define N 3
#define M 4

int labirinto[N][M] = {
    {0, 1, 0, 0},
    {0, 0, 0, 1},
    {1, 0, 1, 0}
};

int solucao[N][M] = {0};

int mover(int x, int y) {
    if (x == N - 1 && y == M - 1 && labirinto[x][y] == 0) {
        solucao[x][y] = 1;
        return 1;
    }
    if (x >= 0 && x < N && y >= 0 && y < M && labirinto[x][y] == 0) {
        if (solucao[x][y] == 1) {
            return 0;
        }
        solucao[x][y] = 1;
        if (mover(x + 1, y)) return 1;
        if (mover(x, y + 1)) return 1;
        if (mover(x - 1, y)) return 1;
        if (mover(x, y - 1)) return 1;
        solucao[x][y] = 0;
    }
    return 0;
}

void imprimirLabirinto() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            if (solucao[i][j])
                printf("* ");
            else
                printf("%d ", labirinto[i][j]);
        }
        printf("\n");
    }
}

int main() {
    if (mover(0, 0)) {
        imprimirLabirinto();
    } else {
        printf("Sem solução.\n");
    }
    return 0;
}
